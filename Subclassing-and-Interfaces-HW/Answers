1. What is the difference between *member variables* (also called *instance variables*) and *class variables* (w/ keyword `static`)? Which can be accessed without creating an instance of the class?

 Member variables can be different among different types of the same class but static variables will always be the same. Static variables can be accessed without creating an instance.

2. Does it make sense to write  *getter* and *setter* methods for a `public` member variable? What about `private` variables?

No it wouldn’t. Private variables can be changed within the class.

3. What are some benefits of making member variables `private`?

So other developers can’t change them. (this point was emphasized a lot in class today, lol).
  
4. If class A extends class B, which is the super class and which is the sub class? Which would you call parent, and which would you call child?

Class B is the super class B, and class A is the subclass A.

5. What does it mean for a class to *inherit* methods and/or variables from its parent class?

It means that the child class will have the methods and variables of its parent class.

6. Consider the following code, where class Refrigerator extends class Appliance, and `getTemperature()` is a method in Refrigerator, but NOT in Appliance:
    ```
    Appliance myAppliance = new Refrigerator();
    double temperature = myAppliance.getTemperature();
    ```
    Why will this call to `getTemperature()` cause an error? How will *casting* help solve this issue?

This is because an object of type Appliance will not recognize the methods in an object of type Refrigerator. To fix this, we can write:
double temperature = ((Refrigerator)myAppliance).getTemperature();

In a normal class (also called a *concrete* class), do you need to *implement* all of the methods, or can your simply *declare* some? What about in an `abstract` class?

You have to do all the methods in a concrete class. In an abstract class, you can do some and you can just say the others. 

8. What about an `interface`? Can you implement any methods in an interface? Can you declare methods in an interface?

You can't implement any method in an interface, you can only declare them.

9. Can you create an instance of an `abstract` class? Also, look up the Java keyword `final` and see if you can explain why a class CANNOT be both `abstract` and `final`.

You can create an instance of an abstract class but you will still have to implement the abstract methods in it as you create its instance.
A class can't be both final and abstract since when using "final", we do not want the member variables and methods to be overridden which defeats the purpose of using abstract where we want the abstract methods to be done. 

10. What happens when a method *overrides* another method? If a parent and child class have methods with the same name, when you call that method on an instance of the child class, which implementation of the method will be executed?

Not sure :(

11. What is the relationship between `List`, `LinkedList`, and `ArrayList`? Why do we call a method *polymorphic* if it takes an input of type `List` rather than an input of type `LinkedList` or `Arraylist`, and why is that useful?

LinkedList and ArrayList are subclasses of List. That method is "polymorphic" because it can accept different types of input(e.g. LinkedList,
 ArrayList). Polymorphism can be seen when using System.out.println(). We can put different variable types inside those
 parentheses and it would still work.